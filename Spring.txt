SPRING
------------------------

Open source framework

DI / IOC

DEsign patterns

The Spring Framework is an inversion of control container that provides flexible infrastructural support to create loosely coupled 
Java applications by utilizing dependency injection.

Application is loosely coupled
Meaning that an object will be available to you without fully writing it

Connection con = new Connection(); ------Normal way
Connection con; --------Spring way

New Maven project
Quickstart

NEED THE SPRING DEPENDENCY IN MAVEN

Create beans.xml file inside main package where app.java is ********************GOT TO STARS

<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">

	<bean id="emp" class="com.training.spring.Employee">

	</bean>
</beans>


----Spring frameework
<!-- https://mvnrepository.com/artifact/org.springframework/spring-core -->
<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
			<version>5.0.9.RELEASE</version>
		</dependency>


		<!-- https://mvnrepository.com/artifact/org.springframework/spring-beans -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-beans</artifactId>
			<version>5.0.9.RELEASE</version>
		</dependency>

---------------------------------

************************

<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">

	<!-- Employee emp = new Employee -->
	<bean id="emp" class="com.training.spring.Employee">
	<!-- emp.setEmployeeName("Devyn") -->
		<property name="employeeName" value="Devyn"></property>
	</bean>
	
	<bean id="emp1" class="com.training.spring.Employee">
	<!-- emp.setEmployeeName("Devyn") -->
		<constructor-arg name="employeeName" value="Trey"></constructor-arg>
	</bean>
	<bean id="emp2" class="com.training.spring.Employee">
	<!-- emp.setEmployeeName("Devyn") -->
		<constructor-arg name="employeeName" value="Joel"></constructor-arg>
	</bean>
	
	<bean id="cust" class="com.training.spring.Customer">
	<!-- emp.setEmployeeName("Devyn") -->
		<property name="customerId" value="1999"></property>
		<property name="customerName" value="Joseph"></property>
		<property name="customerAddress" value="NewYork"></property>
		<property name="balance" value="189999"></property>
	</bean>
	
	<bean id="address1" class="com.training.spring.Address">
	<!-- emp.setEmployeeName("Devyn") -->
		<property name="addressId" value="12"></property>
		<property name="city" value="puyallup"></property>
		<property name="state" value="WA"></property>
		<property name="zipCode" value="98373"></property>
		<property name="address" ref="address2"></property>
	</bean>
	<bean id="address2" class="com.training.spring.Address">
	<!-- emp.setEmployeeName("Devyn") -->
		<constructor-arg name="addressId" value="11"></constructor-arg>
		<constructor-arg name="city" value="boston"></constructor-arg>
		<constructor-arg name="state" value="NewYork"></constructor-arg>
		<constructor-arg name="zipCode" value="90278"></constructor-arg>
	</bean>
	
	<bean id="to" class="com.training.spring.To">
	<!-- emp.setEmployeeName("Devyn") -->
		<property name="toName" value="John"></property>
		<property name="toEmail" value="JohnsHopkins@gmail.com"></property>
	</bean>
	<bean id="from" class="com.training.spring.From">
	<!-- emp.setEmployeeName("Devyn") -->
		<property name="fromName" value="Henry"></property>
		<property name="fromEmail" value="HenryBoi@gmail.com"></property>
	</bean>
	<bean id="subject" class="com.training.spring.Subject">
	<!-- emp.setEmployeeName("Devyn") -->
		<property name="caption" value="You wont believe this"></property>
	</bean>
	<bean id="body" class="com.training.spring.Body">
	<!-- emp.setEmployeeName("Devyn") -->
		<property name="message" value="You may take either the red or blue pill. The choice is yours"></property>
	</bean>
	
	
	<bean id="email" class="com.training.spring.Email" autowire="byName">
	<!-- emp.setEmployeeName("Devyn") -->
		
	</bean>
	
	
	
</beans>

SPRING APP
Email email2 = (Email)factory.getBean("email");
		System.out.println(email2);
EMAIL>JAVA

public class Email {
	private To to;
	private From from;
	private Subject subject;
	private Body body;
	
	public Email(To to, From from, Subject subject, Body body) {
		super();
		this.to = to;
		this.from = from;
		this.subject = subject;
		this.body = body;
	}


-----------------------

<!-- https://mvnrepository.com/artifact/org.springframework/spring-context -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-context</artifactId>
    <version>5.3.17</version>
</dependency>

Created new package.config
App.config class

----------------------------

IOC inversion of control
DI dependency injection

---------------------------

Scope of bean in spring
---
Singleton Scope (default) - Each bean definition is scoped to a single object instance per Spring IoC Container.
Prototype Scope - A single bean definition is scoped to a number of object instances.
Request Scope [Only valid with a web-aware ApplicationContext] - A single bean definition is scoped to the lifecycle of a single HTTP request. This means the HTTP request has its own instance of a bean created from a single bean definition.
Session Scope [Only valid with a web-aware ApplicationContext] - A single bean definition is scoped to the lifecycle of an HTTP Session.
Gloabl Session Scope [Only valid with a web-aware ApplicationContext] - A single bean definition is scoped to the lifecycle of a global HTTP session. Generally only valid when used in a portlet context.
Application Scope [Only valid with a web-aware ApplicationContext] - Scopes a single bean definition to the lifecycle of a ServletContext.

---------------------------

Spring Boot
=====
Spring with zero configuration
Embedded tomcat

localhost:9090/welcome

Welcome to revature US

help - download spring tool 4

-----

new - spring starter project
change to java version 8

spring web dependency
PROJECT IS CREATED

------------------------------------

Making an application

in src/main/resources
open application properties
server.port=9090

Inside the SpringBootBasicsApplication

@SpringBootApplication
@RestController
public class SpringbootBasicsApplication {

	public static void main(String[] args) {
		SpringApplication.run(SpringbootBasicsApplication.class, args);
	}
	
	@RequestMapping("/welcome")
	public String welcome() {
		return "Welcome to revature JWA Batch";
	}
}

RUN AS SPRING BOOT APP
localhost:9090

------------------------------------------

Right click on project - spring - add dev tools

THIS WILL MAKE IT SO YOU DONT HAVE TO RESTART THE SERVER

------------------------------------------

Path Vairables 
--
@RestController
//used at method or class level
@RequestMapping("product")
public class ProductController {
	
	
	@GetMapping
	public String getProducts() { //localhost:5050/product   -GET
		return "Gettin all the products";
	}
	
	@GetMapping("{productId}")
	public String getProduct(@PathVariable("productId") int productId) { //localhost:5050/product   -GET
		return "Getting a single product by product ID : " + productId;
	}
	
	@GetMapping("SearchProductByName/{productName}")
	public String getProductByName(@PathVariable("productName")String pName) { //localhost:5050/product   -GET
		return "Getting a single product by product Name : " + pName;
	}
	
	@GetMapping("single")
	public String getSingleProduct() {     //localhost:5050/product/single   -GET
		return "Gettin a single product";
	}
	
	@PostMapping
	public String saveProduct() {     //localhost:5050/product   -Post
		return "saving a single product";
	}
	
	@PutMapping
	public String updateProduct() {    //localhost:5050/product   -Put
		return "updating a single product";
	}

	
	@DeleteMapping
	public String deleteProduct() {    //localhost:5050/product   -Delete
		return "saving a single product";
	}
	
	@DeleteMapping("/allProduct")
	public String deleteProduct2() {    //localhost:5050/product   -Delete
		return "saving a single product";
	}


----------------------------------------

Lombok
====
library in which you can reduce your boiler plate code

@Data
@NoArgsConstructor
@AllArgsConstructor

right click on prject - add starters - lombok

Click on checkbox POM>XML

-----

----
-right click project - Spring-add starters

postgresQL
JPA



























